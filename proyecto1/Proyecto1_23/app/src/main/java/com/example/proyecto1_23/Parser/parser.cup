package com.example.proyecto1_23.Parser;
import com.example.proyecto1_23.Ocurrencias.movimientoObjetos;
import com.example.proyecto1_23.Vista.movimiento;
import java_cup.runtime.Symbol;
import ReporteErrores.*;
import java.util.ArrayList;
parser code
{:

      public parser(lexer lexerForma) {
              super(lexerForma);
      }
      public void syntax_error(Symbol s) {
              tabla.agregarError(String.valueOf(s.value), s.left, s.right, "ERRORLEXICO");
          }
      //cantidad de moviminetos
      private movimientoObjetos movimientosIndividuales;
      private int cantidadMovimientos;
      private ArrayList<movimientoObjetos> movimientosLista;


      private ArrayList<String> tipoMovimientoLista= new ArrayList<>();
      private ArrayList<Double> cantidadMovimientoLista= new ArrayList<>();
      private ArrayList<Integer> columnasLista= new ArrayList<>();
      private ArrayList<Integer> filasLista= new ArrayList<>();



       private ArrayList<String> operadorMatematico= new ArrayList<>();
          private ArrayList<Integer> columnasListaMatematico= new ArrayList<>();
          private ArrayList<Integer> filasListaMatematico= new ArrayList<>();

      public ArrayList<String> getListaMovimientos(){
          return this.tipoMovimientoLista;
      }
      public ArrayList<Double> getListaCantidadMovimientos(){
              return this.cantidadMovimientoLista;
     }

     public ArrayList<Integer> getcolumnasLista(){
                   return this.columnasLista;
      }
      public ArrayList<Integer> getfilasLista(){
                        return this.filasLista;
      }
    public ArrayList<String> getoperadorMatematico(){
                       return this.operadorMatematico;
          }
     public ArrayList<Integer> getcolumnasListaMatematico(){
                       return this.columnasListaMatematico;
          }
          public ArrayList<Integer> getfilasListaMatematico(){
                            return this.filasListaMatematico;
          }


      public ArrayList<movimientoObjetos> getListMoveGame(){
          return this.movimientosLista;
      }



      //private ReporteErrores tabla = new ReporteErrores();
      private movimiento graficas;
      public void mostrarValoresMovimiento(String tipo) {

      }
     // public void setTabla(ReporteErrores tabla){
    //          this.tabla = tabla;
   //   }




:}


//terminales:
terminal PUNTOCOMA, ESPACIOS, COMENTARIOS, PARENTESISABIERTO, PARENTESISCERRADO, LLAVESABIERTO, LLAVESCERRADO, CORCHETESABIERTO, CORCHETESCERRADO, PUNTO, COMA, SUMA, RESTA, MULTIPLICACION, DIVISION, ERROR, UP, DOWN, LEFT, RIGHT, CEIL, FLOOR, PUSH;
terminal Double  ENTEROS,DECIMAL;
terminal String CADENAS;

// seccion de no termimales
non terminal s, inicioMovimiento, tipoMovimiento, estructuraMovmiento;
non terminal Double expresiones;
non terminal Double expresionIndividual;
non terminal Double funcionesAproximacion;
// para los operadores aritmeticos se tiene una precedencia:

precedence left  SUMA, RESTA;
precedence left  MULTIPLICACION, DIVISION;
precedence left  CEIL, FLOOR;


//estado inicial del analizador sintactico
start with s;
//inicio estados

s::=  inicioMovimiento s
    | inicioMovimiento
;

//movimiento
inicioMovimiento ::= tipoMovimiento estructuraMovmiento PUNTOCOMA

;

// MOVIMIENTOS
tipoMovimiento::= UP:e
                {:
                tipoMovimientoLista.add(String.valueOf(e));
                    columnasLista.add(eright);
                    filasLista.add(eleft);
                System.out.println(e+String.valueOf(eleft)+String.valueOf(eright)); RESULT = e;  :}
                  | DOWN:e {: tipoMovimientoLista.add(String.valueOf(e) );
                               columnasLista.add(eright);
                               filasLista.add(eleft);

                  System.out.println(e+String.valueOf(eleft)+String.valueOf(eright)); RESULT = e;  :}
                  | LEFT:e {:  tipoMovimientoLista.add(String.valueOf(e));
                                columnasLista.add(eright);
                                filasLista.add(eleft);
                                System.out.println(e+String.valueOf(eleft)+String.valueOf(eright)); RESULT = e;  :}
                  | RIGHT:e {: tipoMovimientoLista.add(String.valueOf(e));
                             columnasLista.add(eright);
                             filasLista.add(eleft);
                             System.out.println(e+String.valueOf(eleft)+String.valueOf(eright));RESULT = e;  :}
;

estructuraMovmiento::= PARENTESISABIERTO expresiones:e1 PARENTESISCERRADO
                        /*INGRESO DE VALORES DIRECTOS A LA FUNCION*/
                        {:  cantidadMovimientoLista.add(Double.valueOf(e1)); System.out.println(e1+"  ");  RESULT = e1;  :}
                    |

;
//---------------------------------------------------------------------- ELEMENTOS BASICOS

expresionIndividual::=
        ENTEROS:n {:RESULT = n;:}
    | DECIMAL:d {:RESULT = d;:}
;

expresiones::=
    expresionIndividual:n {:

    operadorMatematico.add(String.valueOf("numero") );
                             columnasListaMatematico.add(nright);
                             filasListaMatematico.add(nleft);
    RESULT = n;

                         :}
        | expresiones:e1 SUMA:o expresiones:e2
                    {:
                     operadorMatematico.add(String.valueOf("suma") );
                     columnasListaMatematico.add(oright);
                     filasListaMatematico.add(oleft);
                    RESULT = e1 + e2;:}
        |expresiones:e1 RESTA:o expresiones:e2
                    {:
                     operadorMatematico.add(String.valueOf("resta") );
                     columnasListaMatematico.add(oright);
                     filasListaMatematico.add(oleft);
                    RESULT = e1 - e2;:}
        | expresiones:e1 MULTIPLICACION:o expresiones:e2
                    {:
                     operadorMatematico.add(String.valueOf("multiplicacion") );
                     columnasListaMatematico.add(oright);
                     filasListaMatematico.add(oleft);
                    RESULT = e1 * e2;:}
        |  expresiones:e1 DIVISION:o expresiones:e2
                    {:
                     operadorMatematico.add(String.valueOf("division") );
                     columnasListaMatematico.add(oright);
                     filasListaMatematico.add(oleft);
                    RESULT = e1 / e2;:}
        | RESTA:e2 expresiones:e1
                {:  operadorMatematico.add(String.valueOf("negativo") );
                                        columnasListaMatematico.add(e2right);
                                        filasListaMatematico.add(e2left);
                RESULT = Double.valueOf(-e1);:}
        | PARENTESISABIERTO expresiones:e PARENTESISCERRADO
                    {:RESULT = e;:}
         | funcionesAproximacion:funciones
         {:RESULT = funciones;:}
;
funcionesAproximacion::=
                 FLOOR:o PARENTESISABIERTO expresiones:e PARENTESISCERRADO
                    {:
                    operadorMatematico.add(String.valueOf("floor") );
                                                   columnasListaMatematico.add(oright);
                                                   filasListaMatematico.add(oleft);
                    RESULT = Math.floor(e);:}
                | CEIL:o PARENTESISABIERTO expresiones:e PARENTESISCERRADO
                    {:
                     operadorMatematico.add(String.valueOf("ceil") );
                     columnasListaMatematico.add(oright);
                     filasListaMatematico.add(oleft);
                    RESULT = Math.ceil(e);:}
            ;
